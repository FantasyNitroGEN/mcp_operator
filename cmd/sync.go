package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/your-org/mcp-operator/pkg/registry"
	"github.com/your-org/mcp-operator/pkg/sync"
)

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: sync [list|download|sources|clone-direct] [server-name]")
		os.Exit(1)
	}

	command := os.Args[1]
	ctx := context.Background()

	client := registry.NewClient()
	syncer := sync.NewSyncer(client, "servers")

	switch command {
	case "list":
		err := listServers(ctx, client)
		if err != nil {
			log.Fatal(err)
		}
	case "download":
		if len(os.Args) < 3 {
			fmt.Println("Usage: sync download <server-name>")
			os.Exit(1)
		}
		serverName := os.Args[2]
		err := downloadServer(ctx, syncer, serverName)
		if err != nil {
			log.Fatal(err)
		}
	case "sources":
		if len(os.Args) < 3 {
			fmt.Println("Usage: sync sources <server-name>")
			os.Exit(1)
		}
		serverName := os.Args[2]
		err := downloadSources(ctx, syncer, serverName)
		if err != nil {
			log.Fatal(err)
		}
	case "sync-all":
		err := syncAllServers(ctx, syncer)
		if err != nil {
			log.Fatal(err)
		}
	case "clone-direct":
		err := cloneRegistry(ctx)
		if err != nil {
			log.Fatal(err)
		}
	default:
		fmt.Println("Unknown command:", command)
		fmt.Println("Available commands: list, download, sources, sync-all, clone-direct")
		os.Exit(1)
	}
}

func listServers(ctx context.Context, client *registry.Client) error {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
	registryPath := "mcp-registry"
	if client.HasLocalRegistry(registryPath) {
		fmt.Println("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π MCP Registry...")

		servers, err := client.ListServersLocal(ctx, registryPath)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞: %v\n", err)
			return fmt.Errorf("failed to list local servers: %w", err)
		}

		fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ:\n\n", len(servers))

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
		displayCount := len(servers)
		if displayCount > 20 {
			displayCount = 20
		}

		for i, server := range servers[:displayCount] {
			fmt.Printf("%d. üì¶ %s\n", i+1, server.Name)
			fmt.Printf("   Path: %s\n", server.Path)
			fmt.Printf("   Updated: %s\n", server.UpdatedAt.Format("2006-01-02 15:04:05"))
			fmt.Println()
		}

		if len(servers) > 20 {
			fmt.Printf("... –∏ –µ—â–µ %d —Å–µ—Ä–≤–µ—Ä–æ–≤\n", len(servers)-20)
			fmt.Println("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
			fmt.Println("  make registry-list-local")
		}

		return nil
	}

	// –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º GitHub API
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Docker MCP Registry...")

	if os.Getenv("GITHUB_TOKEN") == "" {
		fmt.Println("‚ö†Ô∏è GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è GitHub API")
		fmt.Println("   –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω: https://github.com/settings/tokens")
		fmt.Println("   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ: export GITHUB_TOKEN=your_token")
		fmt.Println()
	}

	servers, err := client.ListServers(ctx)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: %v\n", err)
		fmt.Println("\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
		fmt.Println("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GITHUB_TOKEN:")
		fmt.Println("   export GITHUB_TOKEN=your_github_token")
		fmt.Println("2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:")
		fmt.Println("   make registry-clone-direct")
		return fmt.Errorf("failed to list servers: %w", err)
	}

	fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ:\n\n", len(servers))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
	displayCount := len(servers)
	if displayCount > 20 {
		displayCount = 20
	}

	for i, server := range servers[:displayCount] {
		fmt.Printf("%d. üì¶ %s\n", i+1, server.Name)
		fmt.Printf("   Path: %s\n", server.Path)
		if server.HTMLURL != "" {
			fmt.Printf("   URL: %s\n", server.HTMLURL)
		}
		fmt.Println()
	}

	if len(servers) > 20 {
		fmt.Printf("... –∏ –µ—â–µ %d —Å–µ—Ä–≤–µ—Ä–æ–≤\n", len(servers)-20)
		fmt.Println("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
		fmt.Println("  make registry-list | less")
	}

	return nil
}

func downloadServer(ctx context.Context, syncer *sync.Syncer, serverName string) error {
	fmt.Printf("–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ %s...\n", serverName)

	err := syncer.DownloadServerSpec(ctx, serverName)
	if err != nil {
		return fmt.Errorf("failed to download server spec: %w", err)
	}

	fmt.Printf("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ %s —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ servers/yamls/\n", serverName)
	return nil
}

func downloadSources(ctx context.Context, syncer *sync.Syncer, serverName string) error {
	fmt.Printf("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞ %s...\n", serverName)

	err := syncer.DownloadServerSources(ctx, serverName)
	if err != nil {
		return fmt.Errorf("failed to download server sources: %w", err)
	}

	fmt.Printf("‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞ %s —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ servers/sources/\n", serverName)
	return nil
}

func syncAllServers(ctx context.Context, syncer *sync.Syncer) error {
	fmt.Println("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞...")

	err := syncer.SyncAllServers(ctx)
	if err != nil {
		return fmt.Errorf("failed to sync all servers: %w", err)
	}

	fmt.Println("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

func cloneRegistry(ctx context.Context) error {
	fmt.Println("üîÑ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker MCP Registry –ª–æ–∫–∞–ª—å–Ω–æ...")

	registryDir := "mcp-registry"
	registryURL := "https://github.com/docker/mcp-registry.git"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
	if _, err := os.Stat(registryDir); err == nil {
		fmt.Println("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è mcp-registry —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –¥–µ–ª–∞–µ–º git pull
		cmd := exec.Command("git", "pull")
		cmd.Dir = registryDir
		output, err := cmd.CombinedOutput()
		if err != nil {
			return fmt.Errorf("failed to update registry: %v, output: %s", err, output)
		}
		fmt.Println("‚úÖ –†–µ–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
	} else {
		// –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
		fmt.Printf("üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ %s...\n", registryURL)
		cmd := exec.Command("git", "clone", registryURL, registryDir)
		output, err := cmd.CombinedOutput()
		if err != nil {
			return fmt.Errorf("failed to clone registry: %v, output: %s", err, output)
		}
		fmt.Println("‚úÖ –†–µ–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏
	serversDir := filepath.Join(registryDir, "servers")
	if _, err := os.Stat(serversDir); err != nil {
		return fmt.Errorf("servers directory not found in cloned repository: %v", err)
	}

	entries, err := os.ReadDir(serversDir)
	if err != nil {
		return fmt.Errorf("failed to read servers directory: %v", err)
	}

	fmt.Printf("\nüì¶ –ù–∞–π–¥–µ–Ω–æ %d MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ:\n\n", len(entries))

	count := 0
	for _, entry := range entries {
		if entry.IsDir() && count < 20 {
			fmt.Printf("%d. üì¶ %s\n", count+1, entry.Name())

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ server.yaml
			serverFile := filepath.Join(serversDir, entry.Name(), "server.yaml")
			if _, err := os.Stat(serverFile); err == nil {
				fmt.Printf("   ‚úÖ server.yaml –Ω–∞–π–¥–µ–Ω\n")
			} else {
				fmt.Printf("   ‚ö†Ô∏è  server.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω\n")
			}
			count++
		}
	}

	if len(entries) > 20 {
		fmt.Printf("... –∏ –µ—â–µ %d —Å–µ—Ä–≤–µ—Ä–æ–≤\n", len(entries)-20)
	}

	// –ö–æ–ø–∏—Ä—É–µ–º server.yaml —Ñ–∞–π–ª—ã –≤ unified —Å—Ç—Ä—É–∫—Ç—É—Ä—É servers/yamls/
	fmt.Println("\nüîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ server.yaml —Ñ–∞–π–ª–æ–≤ –≤ servers/yamls/...")
	client := registry.NewClient()
	syncer := sync.NewSyncer(client, "servers")

	if err := syncer.SyncFromLocalRegistry(registryDir); err != nil {
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: %v\n", err)
		fmt.Println("–§–∞–π–ª—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ mcp-registry/, –Ω–æ –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ servers/yamls/")
	}

	fmt.Println("\nüéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
	fmt.Println("  make registry-list-local")
	fmt.Println("  make registry-download SERVER=server-name")
	fmt.Println("  ls servers/yamls/  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö YAML —Ñ–∞–π–ª–æ–≤")

	return nil
}

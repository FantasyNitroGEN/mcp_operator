package sync

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"gopkg.in/yaml.v3"

	"github.com/FantasyNitroGEN/mcp_operator/pkg/registry"
)

// Syncer –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
type Syncer struct {
	client     *registry.Client
	baseDir    string
	yamalsDir  string
	sourcesDir string
}

// NewSyncer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
func NewSyncer(client *registry.Client, baseDir string) *Syncer {
	return &Syncer{
		client:     client,
		baseDir:    baseDir,
		yamalsDir:  filepath.Join(baseDir, "yamls"),
		sourcesDir: filepath.Join(baseDir, "sources"),
	}
}

// SyncAllServers —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
func (s *Syncer) SyncAllServers(ctx context.Context) error {
	servers, err := s.client.ListServers(ctx)
	if err != nil {
		return fmt.Errorf("failed to list servers: %w", err)
	}

	fmt.Printf("–ù–∞–π–¥–µ–Ω–æ %d —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n", len(servers))

	successCount := 0
	errorCount := 0
	rateLimitCount := 0

	for i, server := range servers {
		fmt.Printf("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è %d/%d: %s\n", i+1, len(servers), server.Name)

		if err := s.downloadServerSpecWithRetry(ctx, server.Name); err != nil {
			if strings.Contains(err.Error(), "429") {
				rateLimitCount++
				fmt.Printf("‚ö†Ô∏è Rate limit –¥–ª—è %s: %v\n", server.Name, err)
				// –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ rate limiting
				time.Sleep(2 * time.Second)
			} else {
				errorCount++
				fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ %s: %v\n", server.Name, err)
			}
			continue
		}

		successCount++
		fmt.Printf("‚úÖ %s - —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞\n", server.Name)

		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
		time.Sleep(100 * time.Millisecond)
	}

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n")
	fmt.Printf("   ‚úÖ –£—Å–ø–µ—à–Ω–æ: %d\n", successCount)
	fmt.Printf("   ‚ùå –û—à–∏–±–∫–∏: %d\n", errorCount)
	fmt.Printf("   ‚è≥ Rate limit: %d\n", rateLimitCount)

	return nil
}

// downloadServerSpecWithRetry –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
func (s *Syncer) downloadServerSpecWithRetry(ctx context.Context, serverName string) error {
	maxRetries := 3
	baseDelay := time.Second

	for attempt := 0; attempt < maxRetries; attempt++ {
		err := s.DownloadServerSpec(ctx, serverName)
		if err == nil {
			return nil
		}

		// –ü—Ä–∏ rate limiting —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
		if strings.Contains(err.Error(), "429") {
			delay := baseDelay * time.Duration(1<<uint(attempt)) // exponential backoff
			if attempt < maxRetries-1 {
				fmt.Printf("   Rate limit, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %v...\n", delay)
				time.Sleep(delay)
				continue
			}
		}

		// –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
		if attempt == maxRetries-1 {
			return err
		}

		time.Sleep(baseDelay)
	}

	return fmt.Errorf("exceeded max retries for %s", serverName)
}

// DownloadServerSpec –∑–∞–≥—Ä—É–∂–∞–µ—Ç YAML —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
func (s *Syncer) DownloadServerSpec(ctx context.Context, serverName string) error {
	if err := s.ensureDir(s.yamalsDir); err != nil {
		return fmt.Errorf("failed to create yamls directory: %w", err)
	}

	spec, err := s.client.GetServerSpec(ctx, serverName)
	if err != nil {
		return fmt.Errorf("failed to get server spec: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ servers/yamls/
	serverDir := filepath.Join(s.yamalsDir, serverName)
	if err := os.MkdirAll(serverDir, 0755); err != nil {
		return fmt.Errorf("failed to create server directory: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ YAML —Ñ–∞–π–ª
	specPath := filepath.Join(serverDir, "server.yaml")

	yamlData, err := yaml.Marshal(spec)
	if err != nil {
		return fmt.Errorf("failed to marshal spec to YAML: %w", err)
	}

	if err := os.WriteFile(specPath, yamlData, 0644); err != nil {
		return fmt.Errorf("failed to write spec file: %w", err)
	}

	return nil
}

// DownloadServerSources –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞
func (s *Syncer) DownloadServerSources(ctx context.Context, serverName string) error {
	if err := s.ensureDir(s.sourcesDir); err != nil {
		return fmt.Errorf("failed to create sources directory: %w", err)
	}

	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏

	// 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –Ω–∞–π—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	if spec, err := s.client.GetServerSpec(ctx, serverName); err == nil && spec.Repository != "" {
		fmt.Printf("   –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: %s\n", spec.Repository)
		if err := s.cloneRepository(spec.Repository, serverName); err == nil {
			return nil
		}
		fmt.Printf("   –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: %v\n", err)
	}

	// 2. Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ Docker
	fmt.Printf("   –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Docker MCP Registry...\n")
	if err := s.downloadFromDockerRegistry(ctx, serverName); err == nil {
		return nil
	}

	// 3. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
	fmt.Printf("   –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–µ—Ä–∞...\n")
	return s.createBasicServerStructure(serverName)
}

// downloadFromDockerRegistry –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–∑ Docker MCP Registry
func (s *Syncer) downloadFromDockerRegistry(ctx context.Context, serverName string) error {
	sourcePath := filepath.Join(s.sourcesDir, serverName)

	// –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
	if err := os.RemoveAll(sourcePath); err != nil {
		return fmt.Errorf("failed to remove existing source directory: %w", err)
	}

	// –ö–ª–æ–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker MCP Registry
	repoURL := "https://github.com/docker/mcp-registry.git"
	tempDir := filepath.Join(os.TempDir(), "mcp-registry-temp")

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
	os.RemoveAll(tempDir)

	cmd := exec.CommandContext(ctx, "git", "clone", "--depth", "1", repoURL, tempDir)
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to clone registry: %w", err)
	}
	defer os.RemoveAll(tempDir)

	// –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É —Å–µ—Ä–≤–µ—Ä–∞
	serverDir := filepath.Join(tempDir, "servers", serverName)
	if _, err := os.Stat(serverDir); os.IsNotExist(err) {
		return fmt.Errorf("server %s not found in registry", serverName)
	}

	cmd = exec.Command("cp", "-r", serverDir, sourcePath)
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to copy server sources: %w", err)
	}

	return nil
}

// cloneRepository –∫–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–µ—Ä–≤–µ—Ä–∞
func (s *Syncer) cloneRepository(repoURL, serverName string) error {
	sourcePath := filepath.Join(s.sourcesDir, serverName)

	// –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
	if err := os.RemoveAll(sourcePath); err != nil {
		return fmt.Errorf("failed to remove existing source directory: %w", err)
	}

	cmd := exec.Command("git", "clone", repoURL, sourcePath)
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to clone repository: %w", err)
	}

	return nil
}

// ensureDir —Å–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func (s *Syncer) ensureDir(dir string) error {
	if _, err := os.Stat(dir); os.IsNotExist(err) {
		return os.MkdirAll(dir, 0755)
	}
	return nil
}

// GetLocalServers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
func (s *Syncer) GetLocalServers() ([]string, error) {
	var servers []string

	if _, err := os.Stat(s.yamalsDir); os.IsNotExist(err) {
		return servers, nil
	}

	entries, err := os.ReadDir(s.yamalsDir)
	if err != nil {
		return nil, fmt.Errorf("failed to read yamls directory: %w", err)
	}

	for _, entry := range entries {
		if !entry.IsDir() && strings.HasSuffix(entry.Name(), ".yaml") {
			serverName := strings.TrimSuffix(entry.Name(), ".yaml")
			servers = append(servers, serverName)
		}
	}

	return servers, nil
}

// HasLocalSources –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
func (s *Syncer) HasLocalSources(serverName string) bool {
	sourcePath := filepath.Join(s.sourcesDir, serverName)
	_, err := os.Stat(sourcePath)
	return err == nil
}

// LoadServerSpec –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
func (s *Syncer) LoadServerSpec(serverName string) (*registry.MCPServerSpec, error) {
	specPath := filepath.Join(s.yamalsDir, serverName, "server.yaml")

	data, err := os.ReadFile(specPath)
	if err != nil {
		return nil, fmt.Errorf("failed to read spec file: %w", err)
	}

	var spec registry.MCPServerSpec
	if err := yaml.Unmarshal(data, &spec); err != nil {
		return nil, fmt.Errorf("failed to unmarshal spec: %w", err)
	}

	return &spec, nil
}

// createBasicServerStructure —Å–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
func (s *Syncer) createBasicServerStructure(serverName string) error {
	sourcePath := filepath.Join(s.sourcesDir, serverName)

	if err := os.MkdirAll(sourcePath, 0755); err != nil {
		return fmt.Errorf("failed to create server directory: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
	spec := s.getDefaultServerSpec(serverName)

	// –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
	specData, err := yaml.Marshal(spec)
	if err != nil {
		return fmt.Errorf("failed to marshal default spec: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ servers/yamls/
	serverDir := filepath.Join(s.yamalsDir, serverName)
	if err := os.MkdirAll(serverDir, 0755); err != nil {
		return fmt.Errorf("failed to create server directory: %w", err)
	}

	specPath := filepath.Join(serverDir, "server.yaml")
	if err := os.WriteFile(specPath, specData, 0644); err != nil {
		return fmt.Errorf("failed to write default spec: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π Dockerfile
	dockerfilePath := filepath.Join(sourcePath, "Dockerfile")
	dockerfileContent := s.generateDockerfile(serverName, spec.Runtime.Type)

	if err := os.WriteFile(dockerfilePath, []byte(dockerfileContent), 0644); err != nil {
		return fmt.Errorf("failed to write Dockerfile: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º README
	readmePath := filepath.Join(sourcePath, "README.md")
	readmeContent := fmt.Sprintf("# MCP Server: %s\n\n–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ %s, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–º. –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/docker/mcp-registry/tree/main/servers/%s\n", serverName, serverName, serverName)

	if err := os.WriteFile(readmePath, []byte(readmeContent), 0644); err != nil {
		return fmt.Errorf("failed to write README: %w", err)
	}

	fmt.Printf("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è %s\n", serverName)
	return nil
}

// getDefaultServerSpec –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func (s *Syncer) getDefaultServerSpec(serverName string) *registry.MCPServerSpec {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø runtime –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
	runtimeType := "python" // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	image := "python:3.11-slim"
	command := []string{"python", "-m", fmt.Sprintf("mcp_server_%s", serverName)}

	if strings.Contains(serverName, "node") || strings.Contains(serverName, "js") {
		runtimeType = "node"
		image = "node:18-alpine"
		command = []string{"npm", "start"}
	} else if strings.Contains(serverName, "go") {
		runtimeType = "go"
		image = "golang:1.21-alpine"
		command = []string{"./main"}
	}

	return &registry.MCPServerSpec{
		Name:        serverName,
		Version:     "1.0.0",
		Description: fmt.Sprintf("MCP server for %s", serverName),
		Runtime: registry.RuntimeSpec{
			Type:    runtimeType,
			Image:   image,
			Command: command,
		},
		Capabilities: []string{
			"tools",
			"resources",
		},
	}
}

// SyncFromLocalRegistry –∫–æ–ø–∏—Ä—É–µ—Ç server.yaml —Ñ–∞–π–ª—ã –∏–∑ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –≤ servers/yamls/
func (s *Syncer) SyncFromLocalRegistry(registryPath string) error {
	if err := s.ensureDir(s.yamalsDir); err != nil {
		return fmt.Errorf("failed to create yamls directory: %w", err)
	}

	serversDir := filepath.Join(registryPath, "servers")
	if _, err := os.Stat(serversDir); err != nil {
		return fmt.Errorf("local registry servers directory not found at %s: %w", serversDir, err)
	}

	entries, err := os.ReadDir(serversDir)
	if err != nil {
		return fmt.Errorf("failed to read servers directory: %w", err)
	}

	successCount := 0
	errorCount := 0

	fmt.Printf("üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ server.yaml —Ñ–∞–π–ª–æ–≤ –≤ servers/yamls/...\n")

	for _, entry := range entries {
		if entry.IsDir() {
			serverName := entry.Name()
			serverFile := filepath.Join(serversDir, serverName, "server.yaml")

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ server.yaml
			if _, err := os.Stat(serverFile); err == nil {
				// –ß–∏—Ç–∞–µ–º server.yaml
				content, err := os.ReadFile(serverFile)
				if err != nil {
					fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s: %v\n", serverName, err)
					errorCount++
					continue
				}

				// –ü–∞—Ä—Å–∏–º server.yaml –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
				var serverYAML registry.ServerYAML
				if err := yaml.Unmarshal(content, &serverYAML); err != nil {
					fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ %s: %v\n", serverName, err)
					errorCount++
					continue
				}

				// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MCPServerSpec —Ñ–æ—Ä–º–∞—Ç
				spec := &registry.MCPServerSpec{
					Name:        serverYAML.Name,
					Description: serverYAML.About.Description,
					Repository:  serverYAML.Source.Project,
					Runtime: registry.RuntimeSpec{
						Type:  serverYAML.Type,
						Image: serverYAML.Image,
					},
					Keywords: serverYAML.Meta.Tags,
				}

				// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ servers/yamls/
				serverDir := filepath.Join(s.yamalsDir, serverName)
				if err := os.MkdirAll(serverDir, 0755); err != nil {
					fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ %s: %v\n", serverName, err)
					errorCount++
					continue
				}

				specPath := filepath.Join(serverDir, "server.yaml")
				yamlData, err := yaml.Marshal(spec)
				if err != nil {
					fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ %s: %v\n", serverName, err)
					errorCount++
					continue
				}

				if err := os.WriteFile(specPath, yamlData, 0644); err != nil {
					fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ %s: %v\n", serverName, err)
					errorCount++
					continue
				}

				successCount++
				if successCount <= 10 || successCount%50 == 0 {
					fmt.Printf("‚úÖ %s —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ servers/yamls/\n", serverName)
				}
			}
		}
	}

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:\n")
	fmt.Printf("   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: %d —Ñ–∞–π–ª–æ–≤\n", successCount)
	if errorCount > 0 {
		fmt.Printf("   ‚ùå –û—à–∏–±–∫–∏: %d —Ñ–∞–π–ª–æ–≤\n", errorCount)
	}
	fmt.Printf("   üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n", s.yamalsDir)

	return nil
}

// generateDockerfile —Å–æ–∑–¥–∞–µ—Ç Dockerfile –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
func (s *Syncer) generateDockerfile(serverName, runtimeType string) string {
	switch runtimeType {
	case "node":
		return fmt.Sprintf(`FROM node:18-alpine

WORKDIR /app

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY package*.json ./
RUN npm ci --only=production

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
COPY . .

EXPOSE 8080

CMD ["npm", "start"]
`)

	case "go":
		return fmt.Sprintf(`FROM golang:1.21-alpine AS builder

WORKDIR /app

COPY go.mod go.sum ./
RUN go mod download

COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build -o main .

FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/

COPY --from=builder /app/main .

EXPOSE 8080
CMD ["./main"]
`)

	default: // python
		return fmt.Sprintf(`FROM python:3.11-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN apt-get update && apt-get install -y \\
    git \\
    && rm -rf /var/lib/apt/lists/*

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
COPY . .

EXPOSE 8080

CMD ["python", "-m", "mcp_server_%s"]
`, serverName)
	}
}

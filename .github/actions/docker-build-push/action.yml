name: docker-build-push
description: Multi-arch buildx; PR=build-only; push latest on push
inputs:
  registry:   { required: true }
  image-name: { required: true } # owner/repo in lowercase
  push:       { default: "false" }
  cache-scope:{ default: "mcp-operator" }
outputs:
  image:  { value: ${{ steps.meta.outputs.image }} }
  digest: { value: ${{ steps.build.outputs.digest }} }
runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:buildx-stable-1
          network=host
    - if: ${{ inputs.push == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - id: meta
      shell: bash
      run: |
        IMAGE="${{ inputs.registry }}/${{ inputs.image-name }}"
        echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
        if [ "${{ inputs.push }}" = "true" ]; then
          echo "tags=${IMAGE}:latest" >> "$GITHUB_OUTPUT"
        else
          echo "tags=${IMAGE}:pr-${{ github.event.number || 'dry' }}" >> "$GITHUB_OUTPUT"
        fi
    - id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          org.opencontainers.image.title=${{ github.repository }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        cache-from: ${{ inputs.push == 'true'
          && format('type=gha,scope={0}\ntype=registry,ref={1}/{2}:buildcache', inputs.cache-scope, inputs.registry, inputs.image-name)
          || format('type=gha,scope={0}', inputs.cache-scope) }}
        cache-to: ${{ inputs.push == 'true'
          && format('type=gha,scope={0},mode=max\ntype=registry,ref={1}/{2}:buildcache,mode=max', inputs.cache-scope, inputs.registry, inputs.image-name)
          || format('type=gha,scope={0},mode=min', inputs.cache-scope) }}
        outputs: ${{ inputs.push == 'true' && 'type=registry' || 'type=cacheonly' }}
        provenance: true
        attests: type=provenance,mode=max,builder-id=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

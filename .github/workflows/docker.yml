name: Docker Build and Push

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.build.outputs.metadata }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set image name to lowercase
        id: image
        run: |
          echo "IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate tags
        id: meta
        run: |
          IMAGE_BASE="${{ env.REGISTRY }}/${{ steps.image.outputs.IMAGE_NAME }}"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PR: pr-<number> and pr-<number>-<shortsha>
            PR_NUMBER="${{ github.event.number }}"
            TAGS="${IMAGE_BASE}:pr-${PR_NUMBER}"
            TAGS="${TAGS},$IMAGE_BASE:pr-${PR_NUMBER}-${SHORT_SHA}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Tag: <git tag>, sha-<shortsha>, latest
            TAG_NAME="${{ github.ref_name }}"
            TAGS="${IMAGE_BASE}:${TAG_NAME}"
            TAGS="${TAGS},$IMAGE_BASE:sha-${SHORT_SHA}"
            TAGS="${TAGS},$IMAGE_BASE:latest"
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            # Main: latest and sha-<shortsha>
            TAGS="${IMAGE_BASE}:latest"
            TAGS="${TAGS},$IMAGE_BASE:sha-${SHORT_SHA}"
          else
            # Other branches: branch name and sha-<shortsha>
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            TAGS="${IMAGE_BASE}:${BRANCH_NAME}"
            TAGS="${TAGS},$IMAGE_BASE:sha-${SHORT_SHA}"
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=MCP Kubernetes Operator
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: ${{ github.event_name == 'pull_request' && 'type=gha,scope=pr' || format('type=gha,scope={0}\ntype=registry,ref={1}/{2}:buildcache', github.workflow, env.REGISTRY, steps.image.outputs.IMAGE_NAME) }}
          cache-to: ${{ github.event_name == 'pull_request' && 'type=gha,scope=pr,mode=max' || format('type=gha,scope={0},mode=max\ntype=registry,ref={1}/{2}:buildcache,mode=max', github.workflow, env.REGISTRY, steps.image.outputs.IMAGE_NAME) }}
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set image name to lowercase
        id: image
        run: |
          echo "IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # 0.32.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.image.outputs.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-docker
        continue-on-error: true

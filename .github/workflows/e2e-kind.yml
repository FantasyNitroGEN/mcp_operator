name: e2e-kind

on:
  workflow_run:
    workflows: ["Release"]   # имя workflow из docker.yml (name:)
    branches: [ main, develop ]            # где он запускается
    types: [completed]

permissions:
  contents: read
  packages: read

jobs:
  e2e-postgres:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event != 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: '1.24.x'
          check-latest: true

      - name: Create kind cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          cluster_name: mcp-e2e

      - name: Export kubeconfig & sanity check
        id: kube
        run: |
          kind get kubeconfig --name mcp-e2e > /tmp/kubeconfig
          echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV
          kubectl config current-context
          kubectl get nodes -o wide

      - name: Ensure namespace mcp exists
        run: kubectl create namespace mcp || true

      - name: Install MCP Operator (Helm)
        run: |
          set -e

          # 1) ставим чарт в ns mcp
          if [ -d ./helm/mcp-operator ]; then
            helm upgrade --install mcp-operator ./helm/mcp-operator \
              --namespace mcp --create-namespace
          else
            helm repo add mcp-operator https://fantasynitrogen.github.io/mcp_operator/
            helm repo update
            helm upgrade --install mcp-operator mcp-operator/mcp-operator \
              --namespace mcp --create-namespace
          fi

          # 2) принудительно ставим образ ghcr latest (без условий)
          CTN="$(kubectl -n mcp get deploy mcp-operator -o jsonpath='{.spec.template.spec.containers[0].name}')"
          kubectl -n mcp set image deploy/mcp-operator "${CTN}=ghcr.io/fantasynitrogen/mcp_operator:latest" --record

          # 3) ждём раскатку
          kubectl -n mcp rollout status deploy/mcp-operator --timeout=300s

      - name: operator health & CRDs
        run: |
          set -e
          kubectl -n mcp get deploy mcp-operator -o wide
          echo "Known CRDs (if any):"
          kubectl get crds | grep -E 'mcp(allbeone)?\.io|mcpserver|mcpregistry' || true
          echo "--- recent events ---"
          kubectl -n mcp get events --sort-by=.lastTimestamp | tail -n 50 || true

      - name: Health check endpoints
        run: |
          set -e
          # readinessProbe/healthz по умолчанию 8081
          kubectl -n mcp port-forward deploy/mcp-operator 18081:8081 >/tmp/pf.log 2>&1 &
          PF_PID=$!
          sleep 2
          curl -fsS http://127.0.0.1:18081/healthz || (echo "healthz failed" && exit 1)
          kill $PF_PID || true

      - name: Build CLI
        run: go build -o ./bin/mcp ./cmd/mcp

      # --- Postgres in-cluster (битнами чарт) ---
      - name: Add Bitnami repo
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Install PostgreSQL
        run: |
          helm upgrade --install pg bitnami/postgresql \
            --namespace mcp \
            --set auth.postgresPassword=postgres \
            --set auth.database=app \
            --set primary.resources.requests.cpu=50m \
            --set primary.resources.requests.memory=128Mi
          kubectl -n mcp rollout status statefulset/pg-postgresql --timeout=300s

      - name: Compute POSTGRES_URL
        id: pgurl
        shell: bash
        run: |
          URL="postgresql://postgres:postgres@pg-postgresql.mcp.svc.cluster.local:5432/app?sslmode=disable"
          echo "URL=${URL}" >> $GITHUB_OUTPUT

      # --- Deploy MCP Postgres server from registry ---
      - name: Deploy MCP server (postgres) from registry
        run: |
          set -e
          ./bin/mcp server deploy postgres \
            --kubeconfig "$KUBECONFIG" \
            --namespace mcp \
            --replicas 1 \
            --env POSTGRES_URL='${{ steps.pgurl.outputs.URL }}' \
            --wait --timeout 300s

      - name: Validate status
        run: |
          set -e
          echo "== MCPServer list =="
          kubectl -n mcp get mcpservers -o wide

          echo "== MCPServer conditions =="
          kubectl -n mcp get mcpserver postgres -o jsonpath='{.status.conditions}' || true
          echo

          echo "== Workload (by instance label) =="
          kubectl -n mcp get deploy,po,svc -l app.kubernetes.io/instance=postgres || true

          echo "== Wait MCPServer Ready =="
          kubectl -n mcp wait mcpserver/postgres --for=condition=Ready --timeout=180s

      - name: Dump diagnostics on failure
        if: failure()
        run: |
          set -e
          echo "=== MCPServer (full) ==="
          kubectl -n mcp get mcpserver postgres -o yaml || true

          echo "=== All resources in ns mcp ==="
          kubectl -n mcp get all -o wide || true

          echo "=== Workload by labels ==="
          kubectl -n mcp get deploy,po,svc,cm,secret -l app.kubernetes.io/instance=postgres -o yaml || true
          kubectl -n mcp get deploy,po,svc,cm,secret -l mcp.allbeone.io/name=postgres -o yaml || true

          echo "=== Operator logs (last 10m, current & previous) ==="
          OP_POD=$(kubectl -n mcp get pod -l app.kubernetes.io/name=mcp-operator -o jsonpath='{.items[0].metadata.name}' || true)
          if [ -n "$OP_POD" ]; then
            kubectl -n mcp logs "$OP_POD" --since=10m --tail=-1 || true
            echo "--- previous:"
            kubectl -n mcp logs "$OP_POD" --since=10m --tail=-1 --previous || true
          fi

          echo "=== Recent events ==="
          kubectl -n mcp get events --sort-by=.lastTimestamp | tail -n 200 || true

          echo "=== Describe deployment/operator ==="
          kubectl -n mcp describe deploy mcp-operator || true

          echo "=== Describe workload (if present) ==="
          kubectl -n mcp describe deploy -l app.kubernetes.io/instance=postgres || true
          kubectl -n mcp describe po -l app.kubernetes.io/instance=postgres || true

          # Сохраним в файлы для артефакта
          kubectl -n mcp get mcpserver postgres -o yaml > diag_mcpserver.yaml || true
          kubectl -n mcp get all -o yaml > diag_all.yaml || true
          [ -n "$OP_POD" ] && kubectl -n mcp logs "$OP_POD" --since=10m --tail=-1 > diag_operator_logs.txt || true
          kubectl -n mcp get events --sort-by=.lastTimestamp > diag_events.txt || true

      - name: Upload diagnostics artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-kind-diagnostics
          path: |
            diag_mcpserver.yaml
            diag_all.yaml
            diag_operator_logs.txt
            diag_events.txt
          retention-days: 7


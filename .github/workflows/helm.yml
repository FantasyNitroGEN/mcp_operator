---
name: Helm Chart

on:
  push:
    branches: [main, develop]
    paths:
      - 'helm/**'
      - '.github/workflows/helm.yml'
  pull_request:
    branches: [main]
    paths:
      - 'helm/**'
      - '.github/workflows/helm.yml'
  release:
    types: [published]

permissions:
  contents: read
  security-events: write

env:
  HELM_VERSION: v3.14.0

jobs:
  setup:
    name: Setup Helm Environment
    runs-on: ubuntu-latest
    outputs:
      helm-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Generate cache key
        id: cache-key
        run: echo "key=helm-${{ env.HELM_VERSION }}-${{ hashFiles('helm/**/Chart.yaml', 'helm/**/Chart.lock') }}" >> $GITHUB_OUTPUT

      - name: Cache Helm repositories
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.cache/helm/repository
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            helm-${{ env.HELM_VERSION }}-

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.x'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Validate Helm charts
        run: |
          echo "Validating Helm chart structure..."
          for chart in helm/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Found chart: $chart_name"
              helm dependency update "$chart" || true
            fi
          done

  lint-and-test:
    name: Lint and Test Helm Charts
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.x'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Restore Helm repositories cache
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.cache/helm/repository
          key: ${{ needs.setup.outputs.helm-cache-key }}

      - name: Run chart-testing (lint)
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          wait: 300s

      - name: Run chart-testing (install)
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

  security-scan:
    name: Security Scan Helm Charts
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Run Checkov on Helm charts
        uses: bridgecrewio/checkov-action@master
        with:
          directory: helm/
          framework: helm
          output_format: sarif
          output_file_path: checkov-helm.sarif
        continue-on-error: true

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@76621b61decf072c1cee8dd1ce2d2a82d33c17ed # v3
        if: always() && hashFiles('checkov-helm.sarif') != ''
        with:
          sarif_file: checkov-helm.sarif
          category: checkov-helm
        continue-on-error: true

      - name: Run Trivy on Helm charts
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'helm/'
          format: 'sarif'
          output: 'trivy-helm.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@76621b61decf072c1cee8dd1ce2d2a82d33c17ed # v3
        if: always() && hashFiles('trivy-helm.sarif') != ''
        with:
          sarif_file: 'trivy-helm.sarif'
          category: trivy-helm
        continue-on-error: true

  package-and-publish:
    name: Package and Publish Helm Charts
    runs-on: ubuntu-latest
    needs: [security-scan]
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
          if [ $? -eq 0 ]; then
            echo "Successfully logged in to ghcr.io"
          else
            echo "Failed to log in to ghcr.io"
            exit 1
          fi

      - name: Package Helm charts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p ./packaged-charts
          for chart in helm/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Packaging chart: $chart_name"
              helm dependency update "$chart"
              helm package "$chart" --destination ./packaged-charts/
            fi
          done

      - name: Push Helm charts to OCI registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "Repository owner (lowercase): $REPO_OWNER"

          for package in packaged-charts/*.tgz; do
            if [ -f "$package" ]; then
              echo "Pushing $package to OCI registry"
              helm push "$package" "oci://ghcr.io/${REPO_OWNER}/helm-charts"
              if [ $? -eq 0 ]; then
                echo "Successfully pushed $package"
              else
                echo "Failed to push $package"
                exit 1
              fi
            fi
          done

  release-charts:
    name: Release Helm Charts
    runs-on: ubuntu-latest
    needs: [package-and-publish]
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'release'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
          if [ $? -eq 0 ]; then
            echo "Successfully logged in to ghcr.io"
          else
            echo "Failed to log in to ghcr.io"
            exit 1
          fi

      - name: Update chart versions
        if: github.event_name == 'release'
        run: |
          release_version="${{ github.event.release.tag_name }}"
          version="${release_version#v}"

          for chart in helm/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Updating chart version for $chart_name to $version"
              sed -i "s/^version:.*/version: $version/" "$chart/Chart.yaml"
              sed -i "s/^appVersion:.*/appVersion: $version/" "$chart/Chart.yaml"
            fi
          done

      - name: Package and release Helm charts
        if: github.event_name == 'release'
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "Repository owner (lowercase): $REPO_OWNER"

          mkdir -p ./release-charts
          for chart in helm/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Packaging and releasing chart: $chart_name"
              helm dependency update "$chart"
              helm package "$chart" --destination ./release-charts/

              # Push to OCI registry with release tag
              for package in release-charts/${chart_name}-*.tgz; do
                if [ -f "$package" ]; then
                  echo "Pushing $package to OCI registry"
                  helm push "$package" "oci://ghcr.io/${REPO_OWNER}/helm-charts"
                  if [ $? -eq 0 ]; then
                    echo "Successfully pushed $package"
                  else
                    echo "Failed to push $package"
                    exit 1
                  fi
                fi
              done
            fi
          done

      - name: Upload chart packages to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2
        with:
          files: release-charts/*.tgz

  publish-to-github-pages:
    name: Publish Helm Charts to GitHub Pages
    runs-on: ubuntu-latest
    needs: [package-and-publish]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Package Helm charts for GitHub Pages
        run: |
          mkdir -p ./gh-pages-charts
          for chart in helm/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Packaging chart for GitHub Pages: $chart_name"
              helm dependency update "$chart"
              helm package "$chart" --destination ./gh-pages-charts/
            fi
          done
          
          # Copy index.html for GitHub Pages landing page
          if [ -f "helm-pages-index.html" ]; then
            cp helm-pages-index.html ./gh-pages-charts/index.html
            echo "Copied index.html for GitHub Pages landing page"
          fi

      - name: Create Helm repository index
        run: |
          cd ./gh-pages-charts
          helm repo index . --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
          echo "Generated index.yaml:"
          cat index.yaml

      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3
        with:
          path: ./gh-pages-charts

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4
